From c7f24d06fffd1a01914c3fff5f2f709cecb668de Mon Sep 17 00:00:00 2001
From: Jonathan Scruggs <j.scruggs@gmail.com>
Date: Fri, 1 Sep 2017 18:53:04 +0100
Subject: [PATCH 2/2] oiio/RB-1.7: Make python and boost detection more generic

Fix boost python detection and clean up python detection.
Remove redundant code.

Signed-off by: Jonathan Scruggs <j.scruggs@gmail.com>
---
 CMakeLists.txt                   |  39 ++++++----
 src/cmake/externalpackages.cmake | 139 +++++++++++++++++++++++------------
 src/python/CMakeLists.txt        | 154 +++++++++++++++++++--------------------
 3 files changed, 194 insertions(+), 138 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 82e9c8af..1e120f3c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -181,9 +181,9 @@ set (USE_OPENGL ON CACHE BOOL "Include OpenGL support")
 set (USE_QT ON CACHE BOOL "Include Qt support")
 set (FORCE_OPENGL_1 OFF CACHE BOOL "Force iv to use OpenGL's fixed pipeline")
 set (USE_PYTHON ON CACHE BOOL "Build the Python bindings")
-set (USE_PYTHON3 OFF CACHE BOOL "Build the Python3 bindings")
-set (PYTHON_VERSION 2.6)
-set (PYTHON3_VERSION 3.2)
+#set (USE_PYTHON3 OFF CACHE BOOL "Build the Python3 bindings")
+set (PYTHON_VERSION 3.4) # Set a default. Can be overridden
+#set (PYTHON3_VERSION 3.2)
 set (PYLIB_INCLUDE_SONAME OFF CACHE BOOL "If ON, soname/soversion will be set for Python module library")
 set (PYLIB_LIB_PREFIX OFF CACHE BOOL "If ON, prefix the Python module with 'lib'")
 set (USE_FIELD3D ON CACHE BOOL "Use Field3D if found")
@@ -331,7 +331,7 @@ if (BUILDSTATIC)
         # On Linux, the lack of -fPIC when building static libraries seems
         # incompatible with the dynamic library needed for the Python bindings.
         set (USE_PYTHON OFF)
-        set (USE_PYTHON3 OFF)
+#        set (USE_PYTHON3 OFF)
     endif ()
     if (WIN32)
         set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
@@ -375,12 +375,12 @@ include_directories (
 ###########################################################################
 # Set paths for the python module install
 # TODO: Figure out how to get the correct python directory
-set (DEFAULT_PYLIB_INSTALL_DIR "lib/python/site-packages")
-set (DEFAULT_PYLIB3_INSTALL_DIR "lib/python3/site-packages")
-set (PYLIB_INSTALL_DIR ${DEFAULT_PYLIB_INSTALL_DIR} CACHE STRING
-     "Install location for python libraries (relative to CMAKE_INSTALL_PREFIX or absolute)")
-set (PYLIB3_INSTALL_DIR ${DEFAULT_PYLIB3_INSTALL_DIR} CACHE STRING
-     "Install location for python3 libraries (relative to CMAKE_INSTALL_PREFIX or absolute)")
+# set (DEFAULT_PYLIB_INSTALL_DIR "lib/python/site-packages")
+# set (DEFAULT_PYLIB3_INSTALL_DIR "lib/python3/site-packages")
+# set (PYLIB_INSTALL_DIR ${DEFAULT_PYLIB_INSTALL_DIR} CACHE STRING
+#      "Install location for python libraries (relative to CMAKE_INSTALL_PREFIX or absolute)")
+# set (PYLIB3_INSTALL_DIR ${DEFAULT_PYLIB3_INSTALL_DIR} CACHE STRING
+#      "Install location for python3 libraries (relative to CMAKE_INSTALL_PREFIX or absolute)")
 
 set (PLUGIN_SEARCH_PATH "" CACHE STRING "Default plugin search path")
 
@@ -477,14 +477,21 @@ if (NOT EMBEDPLUGINS AND NOT BUILD_OIIOUTIL_ONLY)
     endforeach ()
 endif ()
 
-if (USE_PYTHON AND boost_PYTHON_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
+if (PYTHONLIBS_FOUND AND boost_PYTHON_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
     add_subdirectory (src/python)
+else ()
+    if (NOT PYTHONLIBS_FOUND)
+        message (STATUS "Python libraries not found")
+    endif ()
+    if (NOT Boost_FOUND)
+        message (STATUS "Boost python component not found")
+    endif ()
 endif ()
-if (USE_PYTHON3 AND boost_PYTHON_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
-    #build the python3 module in a different binary directory since it will
-    #have the same name as the python2 module (e.g. OpenImageIO.so)
-    add_subdirectory (src/python src/python3)
-endif ()
+# if (USE_PYTHON3 AND boost_PYTHON_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
+#     #build the python3 module in a different binary directory since it will
+#     #have the same name as the python2 module (e.g. OpenImageIO.so)
+#     add_subdirectory (src/python src/python3)
+# endif ()
 
 add_subdirectory (src/include)
 if (INSTALL_DOCS)
diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 03faf7bd..89021e20 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -108,6 +108,36 @@ endif ()
 ###########################################################################
 
 
+###########################################################################
+# Python setup
+if (USE_PYTHON)
+    if (NOT DEFINED Python_ADDITIONAL_VERSIONS)
+        # Support newer versions first. Can be overridden.
+        set (Python_ADDITIONAL_VERSIONS "3.7" "3.6" "3.5" "3.4" "2.7")
+    endif ()
+    find_package (PythonInterp ${PYTHON_VERSION} REQUIRED)
+    
+    # The version that was found may not be the default or user
+    # defined one.
+    set (PYTHON_VERSION ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})
+    find_package (PythonLibs ${PYTHON_VERSION} REQUIRED)
+
+    if (VERBOSE)
+        message (STATUS "Python found ${PYTHONLIBS_FOUND} ")
+        message (STATUS "Python executable ${PYTHON_EXECUTABLE} ")
+        message (STATUS "Python version ${PYTHON_VERSION_STRING} ")
+        message (STATUS "Python include dirs ${PYTHON_INCLUDE_PATH}")
+        message (STATUS "Python libraries    ${PYTHON_LIBRARIES}")
+        message (STATUS "Python to include 'lib' prefix: ${PYLIB_LIB_PREFIX}")
+        message (STATUS "Python to include SO version: ${PYLIB_INCLUDE_SONAME}")
+    endif ()
+endif ()
+
+
+# end Python setup
+###########################################################################
+
+
 ###########################################################################
 # Boost setup
 
@@ -116,10 +146,10 @@ if (NOT Boost_FIND_QUIETLY)
 endif ()
 
 if (NOT DEFINED Boost_ADDITIONAL_VERSIONS)
-  set (Boost_ADDITIONAL_VERSIONS "1.60" "1.59" "1.58" "1.57" "1.56"
-                                 "1.55" "1.54" "1.53" "1.52" "1.51" "1.50"
-                                 "1.49" "1.48" "1.47" "1.46" "1.45" "1.44"
-                                 "1.43" "1.43.0" "1.42" "1.42.0")
+  set (Boost_ADDITIONAL_VERSIONS "1.64" "1.63" "1.62" "1.61" "1.60" "1.59"
+                                 "1.58" "1.57" "1.56" "1.55" "1.54" "1.53"
+                                 "1.52" "1.51" "1.50" "1.49" "1.48" "1.47"
+                                 "1.46" "1.45" "1.44" "1.43" "1.42")
 endif ()
 if (LINKSTATIC)
     set (Boost_USE_STATIC_LIBS   ON)
@@ -135,46 +165,63 @@ else ()
                   COMPONENTS ${Boost_COMPONENTS}
                  )
 
-    # Try to figure out if this boost distro has Boost::python.  If we
-    # include python in the component list above, cmake will abort if
-    # it's not found.  So we resort to checking for the boost_python
-    # library's existance to get a soft failure.
-    find_library (my_boost_python_lib boost_python
-                  PATHS ${Boost_LIBRARY_DIRS} NO_DEFAULT_PATH)
-    mark_as_advanced (my_boost_python_lib)
-    if (NOT my_boost_python_lib AND Boost_SYSTEM_LIBRARY_RELEASE)
-        get_filename_component (my_boost_PYTHON_rel
-                                ${Boost_SYSTEM_LIBRARY_RELEASE} NAME
-                               )
-        string (REGEX REPLACE "^(lib)?(.+)_system(.+)$" "\\2_python\\3"
-                my_boost_PYTHON_rel ${my_boost_PYTHON_rel}
-               )
-        find_library (my_boost_PYTHON_LIBRARY_RELEASE
-                      NAMES ${my_boost_PYTHON_rel} lib${my_boost_PYTHON_rel}
-                      HINTS ${Boost_LIBRARY_DIRS}
-                      NO_DEFAULT_PATH
-                     )
-        mark_as_advanced (my_boost_PYTHON_LIBRARY_RELEASE)
-    endif ()
-    if (NOT my_boost_python_lib AND Boost_SYSTEM_LIBRARY_DEBUG)
-        get_filename_component (my_boost_PYTHON_dbg
-                                ${Boost_SYSTEM_LIBRARY_DEBUG} NAME
-                               )
-        string (REGEX REPLACE "^(lib)?(.+)_system(.+)$" "\\2_python\\3"
-                my_boost_PYTHON_dbg ${my_boost_PYTHON_dbg}
-               )
-        find_library (my_boost_PYTHON_LIBRARY_DEBUG
-                      NAMES ${my_boost_PYTHON_dbg} lib${my_boost_PYTHON_dbg}
-                      HINTS ${Boost_LIBRARY_DIRS}
-                      NO_DEFAULT_PATH
-                     )
-        mark_as_advanced (my_boost_PYTHON_LIBRARY_DEBUG)
-    endif ()
-    if (my_boost_python_lib OR
-        my_boost_PYTHON_LIBRARY_RELEASE OR my_boost_PYTHON_LIBRARY_DEBUG)
-        set (boost_PYTHON_FOUND ON)
-    else ()
-        set (boost_PYTHON_FOUND OFF)
+    # If python isn't found then there's no need to search for boost_python
+    set (boost_PYTHON_FOUND OFF)
+    if (PYTHONLIBS_FOUND)
+        #Finding the python component for boost is a little tricky, since it has
+        #different names on different systems. Try the most common ones
+        #(boost_python, boost_python-py34, â€¦).
+        set (_boost_py_lib "boost_python" "boost_python${PYTHON_VERSION_MAJOR}"
+            "boost_python-py${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}"
+            "boost_python-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}")
+
+        # Try to figure out if this boost distro has Boost::python.  If we
+        # include python in the component list above, cmake will abort if
+        # it's not found.  So we resort to checking for the boost_python
+        # library's existance to get a soft failure.
+        find_library (my_boost_python_lib NAMES ${_boost_py_lib}
+                    PATHS ${Boost_LIBRARY_DIRS} NO_DEFAULT_PATH)
+        mark_as_advanced (my_boost_python_lib)
+        if (my_boost_python_lib)
+            set (Boost_PYTHON_LIBRARIES ${my_boost_python_lib})
+        endif ()
+        if (NOT my_boost_python_lib AND Boost_SYSTEM_LIBRARY_RELEASE)
+            get_filename_component (my_boost_PYTHON_rel
+                                    ${Boost_SYSTEM_LIBRARY_RELEASE} NAME
+                                )
+            string (REGEX REPLACE "^(lib)?(.+)_system(.+)$" "\\2_python\\3"
+                    my_boost_PYTHON_rel ${my_boost_PYTHON_rel}
+                )
+            find_library (my_boost_PYTHON_LIBRARY_RELEASE
+                        NAMES ${my_boost_PYTHON_rel} lib${my_boost_PYTHON_rel}
+                        HINTS ${Boost_LIBRARY_DIRS}
+                        NO_DEFAULT_PATH
+                        )
+            mark_as_advanced (my_boost_PYTHON_LIBRARY_RELEASE)
+            if (my_boost_PYTHON_LIBRARY_RELEASE)
+                set (Boost_PYTHON_LIBRARIES ${my_boost_PYTHON_LIBRARY_RELEASE})
+            endif ()
+        endif ()
+        if (NOT my_boost_python_lib AND Boost_SYSTEM_LIBRARY_DEBUG)
+            get_filename_component (my_boost_PYTHON_dbg
+                                    ${Boost_SYSTEM_LIBRARY_DEBUG} NAME
+                                )
+            string (REGEX REPLACE "^(lib)?(.+)_system(.+)$" "\\2_python\\3"
+                    my_boost_PYTHON_dbg ${my_boost_PYTHON_dbg}
+                )
+            find_library (my_boost_PYTHON_LIBRARY_DEBUG
+                        NAMES ${my_boost_PYTHON_dbg} lib${my_boost_PYTHON_dbg}
+                        HINTS ${Boost_LIBRARY_DIRS}
+                        NO_DEFAULT_PATH
+                        )
+            mark_as_advanced (my_boost_PYTHON_LIBRARY_DEBUG)
+            if (my_boost_PYTHON_LIBRARY_DEBUG)
+                set (Boost_PYTHON_LIBRARIES ${my_boost_PYTHON_LIBRARY_DEBUG})
+            endif ()
+        endif ()
+        if (Boost_PYTHON_LIBRARIES)
+            set (boost_PYTHON_FOUND ON)
+        endif ()
     endif ()
 endif ()
 
@@ -183,7 +230,7 @@ if (CMAKE_SYSTEM_NAME MATCHES "Linux" AND ${Boost_VERSION} GREATER 105499)
     list (APPEND Boost_LIBRARIES "rt")
 endif ()
 
-if (NOT Boost_FIND_QUIETLY)
+if (NOT Boost_FIND_QUIETLY OR VERBOSE)
     message (STATUS "BOOST_ROOT ${BOOST_ROOT}")
     message (STATUS "Boost found ${Boost_FOUND} ")
     message (STATUS "Boost version      ${Boost_VERSION}")
@@ -191,7 +238,9 @@ if (NOT Boost_FIND_QUIETLY)
     message (STATUS "Boost library dirs ${Boost_LIBRARY_DIRS}")
     message (STATUS "Boost libraries    ${Boost_LIBRARIES}")
     message (STATUS "Boost python found ${boost_PYTHON_FOUND}")
+    message (STATUS "Boost python libraries ${Boost_PYTHON_LIBRARIES}")
 endif ()
+
 if (NOT boost_PYTHON_FOUND)
     # If Boost python components were not found, turn off all python support.
     message (STATUS "Boost python support not found -- will not build python components!")
diff --git a/src/python/CMakeLists.txt b/src/python/CMakeLists.txt
index 81a4a890..dd15a251 100644
--- a/src/python/CMakeLists.txt
+++ b/src/python/CMakeLists.txt
@@ -1,58 +1,58 @@
-#if the CMAKE_CURRENT_BINARY_DIR is python3, then build the python3 module,
-#otherwise the python2 module
-string (REGEX MATCH "python3\$" _py3_subdir ${CMAKE_CURRENT_BINARY_DIR})
-
-if (_py3_subdir)
-    set (BUILD_PY3 ON)
-else ()
-    set (BUILD_PY3 OFF)
-endif ()
-
-if (NOT BOOST_CUSTOM AND NOT BUILD_PY3)
-    #Unset those, otherwise find_package(PythonLibs) will pick up old stuff
-    #if it has been run before
-    unset(Python_ADDITIONAL_VERSIONS)
-    unset(PYTHON_LIBRARY)
-    unset(PYTHON_LIBRARY CACHE)
-    unset(PYTHON_INCLUDE_DIR)
-    unset(PYTHON_INCLUDE_DIR CACHE)
-    unset(PYTHON_INCLUDE_PATH)
-    unset(PYTHON_INCLUDE_PATH CACHE)
-    find_package (PythonLibs ${PYTHON_VERSION} REQUIRED)
-    find_package (Boost 1.42 REQUIRED COMPONENTS python)
-elseif (BOOST_CUSTOM AND NOT BUILD_PY3)
-    find_package (PythonLibs ${PYTHON_VERSION} REQUIRED)
-else ()
-    #BOOST_CUSTOM is ignored for python3
-
-    #Unset those, otherwise find_package(PythonLibs) will pick up old stuff
-    #if it has been run before
-    unset(PYTHON_LIBRARY)
-    unset(PYTHON_LIBRARY CACHE)
-    unset(PYTHON_INCLUDE_DIR)
-    unset(PYTHON_INCLUDE_DIR CACHE)
-    unset(PYTHON_INCLUDE_PATH)
-    unset(PYTHON_INCLUDE_PATH CACHE)
-
-    #cmake 2.8 does not look for python 3.4
-    set(Python_ADDITIONAL_VERSIONS 3.4)
-    find_package (PythonInterp ${PYTHON3_VERSION} REQUIRED)
-    find_package (PythonLibs ${PYTHON3_VERSION} REQUIRED)
-
-    #Finding the python3 component for boost is a little tricky, since it has
-    #different names on different systems. Try the most common ones
-    #(boost_python3, boost_python-py34, â€¦).
-    foreach (_boost_py3_lib python3 python-py34 python-py33 python-py32)
-        find_package (Boost 1.42 QUIET COMPONENTS ${_boost_py3_lib})
-        string (TOUPPER ${_boost_py3_lib} boost_py3_lib_name)
-        if (Boost_${boost_py3_lib_name}_FOUND)
-            #Not the most beautiful thing to do, but that gets them included in
-            #the target_link_libraries(â€¦) call farther down
-            set (Boost_PYTHON_LIBRARIES ${Boost_${boost_py3_lib_name}_LIBRARIES})
-            break ()
-        endif ()
-    endforeach ()
-endif ()
+# #if the CMAKE_CURRENT_BINARY_DIR is python3, then build the python3 module,
+# #otherwise the python2 module
+# string (REGEX MATCH "python3\$" _py3_subdir ${CMAKE_CURRENT_BINARY_DIR})
+# 
+# if (_py3_subdir)
+#     set (BUILD_PY3 ON)
+# else ()
+#     set (BUILD_PY3 OFF)
+# endif ()
+# 
+# if (NOT BOOST_CUSTOM AND NOT BUILD_PY3)
+#     #Unset those, otherwise find_package(PythonLibs) will pick up old stuff
+#     #if it has been run before
+#     unset(Python_ADDITIONAL_VERSIONS)
+#     unset(PYTHON_LIBRARY)
+#     unset(PYTHON_LIBRARY CACHE)
+#     unset(PYTHON_INCLUDE_DIR)
+#     unset(PYTHON_INCLUDE_DIR CACHE)
+#     unset(PYTHON_INCLUDE_PATH)
+#     unset(PYTHON_INCLUDE_PATH CACHE)
+#     find_package (PythonLibs ${PYTHON_VERSION} REQUIRED)
+#     find_package (Boost 1.42 REQUIRED COMPONENTS python)
+# elseif (BOOST_CUSTOM AND NOT BUILD_PY3)
+#     find_package (PythonLibs ${PYTHON_VERSION} REQUIRED)
+# else ()
+#     #BOOST_CUSTOM is ignored for python3
+# 
+#     #Unset those, otherwise find_package(PythonLibs) will pick up old stuff
+#     #if it has been run before
+#     unset(PYTHON_LIBRARY)
+#     unset(PYTHON_LIBRARY CACHE)
+#     unset(PYTHON_INCLUDE_DIR)
+#     unset(PYTHON_INCLUDE_DIR CACHE)
+#     unset(PYTHON_INCLUDE_PATH)
+#     unset(PYTHON_INCLUDE_PATH CACHE)
+# 
+#     #cmake 2.8 does not look for python 3.4
+#     set(Python_ADDITIONAL_VERSIONS 3.4)
+#     find_package (PythonInterp ${PYTHON3_VERSION} REQUIRED)
+#     find_package (PythonLibs ${PYTHON3_VERSION} REQUIRED)
+# 
+#     #Finding the python3 component for boost is a little tricky, since it has
+#     #different names on different systems. Try the most common ones
+#     #(boost_python3, boost_python-py34, â€¦).
+#     foreach (_boost_py3_lib python3 python-py34 python-py33 python-py32)
+#         find_package (Boost 1.42 QUIET COMPONENTS ${_boost_py3_lib})
+#         string (TOUPPER ${_boost_py3_lib} boost_py3_lib_name)
+#         if (Boost_${boost_py3_lib_name}_FOUND)
+#             #Not the most beautiful thing to do, but that gets them included in
+#             #the target_link_libraries(â€¦) call farther down
+#             set (Boost_PYTHON_LIBRARIES ${Boost_${boost_py3_lib_name}_LIBRARIES})
+#             break ()
+#         endif ()
+#     endforeach ()
+# endif ()
 
 if (APPLE)
 #    set (PYTHON_LIBRARIES /opt/local/lib)
@@ -63,13 +63,13 @@ if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     add_definitions ("-Wno-array-bounds")
 endif ()
 
-if (BUILD_PY3)
-    set (target_name Py3OpenImageIO)
-else ()
-    set (target_name PyOpenImageIO)
-endif ()
+# if (BUILD_PY3)
+#     set (target_name Py3OpenImageIO)
+# else ()
+#     set (target_name PyOpenImageIO)
+# endif ()
 
-if (BOOST_CUSTOM OR Boost_FOUND AND PYTHONLIBS_FOUND)
+# if (BOOST_CUSTOM OR Boost_FOUND AND PYTHONLIBS_FOUND)
 
     set (python_srcs py_imageinput.cpp py_imageoutput.cpp
          py_imagecache.cpp py_imagespec.cpp py_roi.cpp
@@ -77,13 +77,13 @@ if (BOOST_CUSTOM OR Boost_FOUND AND PYTHONLIBS_FOUND)
          py_typedesc.cpp py_paramvalue.cpp py_deepdata.cpp
          py_oiio.cpp)
 
-    if (VERBOSE)
-        message (STATUS "Python found ${PYTHONLIBS_FOUND} ")
-        message (STATUS "Python include dirs ${PYTHON_INCLUDE_PATH}")
-        message (STATUS "Python libraries    ${PYTHON_LIBRARIES}")
-        message (STATUS "Python to include 'lib' prefix: ${PYLIB_LIB_PREFIX}")
-        message (STATUS "Python to include SO version: ${PYLIB_INCLUDE_SONAME}")
-    endif ()
+#     if (VERBOSE)
+#         message (STATUS "Python found ${PYTHONLIBS_FOUND} ")
+#         message (STATUS "Python include dirs ${PYTHON_INCLUDE_PATH}")
+#         message (STATUS "Python libraries    ${PYTHON_LIBRARIES}")
+#         message (STATUS "Python to include 'lib' prefix: ${PYLIB_LIB_PREFIX}")
+#         message (STATUS "Python to include SO version: ${PYLIB_INCLUDE_SONAME}")
+#     endif ()
 
     include_directories (${PYTHON_INCLUDE_PATH} ${Boost_INCLUDE_DIRS})
     add_library (${target_name} MODULE ${python_srcs})
@@ -132,12 +132,12 @@ if (BOOST_CUSTOM OR Boost_FOUND AND PYTHONLIBS_FOUND)
                  RUNTIME DESTINATION ${PYLIB_INSTALL_DIR} COMPONENT user
                  LIBRARY DESTINATION ${PYLIB_INSTALL_DIR} COMPONENT user)
     endif ()
-elseif (BUILD_PY3)
-    if (NOT PYTHONLIBS_FOUND)
-        message (STATUS "Python3 libraries not found")
-    endif ()
-    if (NOT Boost_FOUND)
-        message (STATUS "Boost python3 component not found")
-    endif ()
-    set(USE_PYTHON3 OFF)
-endif ()
+# elseif (BUILD_PY3)
+#     if (NOT PYTHONLIBS_FOUND)
+#         message (STATUS "Python3 libraries not found")
+#     endif ()
+#     if (NOT Boost_FOUND)
+#         message (STATUS "Boost python3 component not found")
+#     endif ()
+#     set(USE_PYTHON3 OFF)
+# endif ()
-- 
2.14.1

