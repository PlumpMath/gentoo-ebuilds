From 9bba4a1acfc42e09780d754245c1e8514a081a70 Mon Sep 17 00:00:00 2001
From: Jonathan Scruggs <j.scruggs@gmail.com>
Date: Sat, 19 Aug 2017 12:18:02 +0100
Subject: [PATCH] oiio/RB-1.7: Use GNUInstallDirs for installation paths

Change all hard coded paths to GNUInstallDirs varibles.

Remove variable setting in main CMakeFiles.txt file since
GNUInstallDirs does all this for you.

Fix boost python detection and clean up python detection

Signed-off by: Jonathan Scruggs <j.scruggs@gmail.com>
---
 CMakeLists.txt                   |  73 ++--------------
 src/cmake/externalpackages.cmake |  32 ++++---
 src/cmake/oiio_macros.cmake      |   6 +-
 src/doc/CMakeLists.txt           |  16 ++--
 src/fonts/CMakeLists.txt         |   6 +-
 src/include/CMakeLists.txt       |   6 +-
 src/nuke/txReader/CMakeLists.txt |   2 +-
 src/nuke/txWriter/CMakeLists.txt |   2 +-
 src/python/CMakeLists.txt        | 177 ++++++++++-----------------------------
 9 files changed, 96 insertions(+), 224 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ca8da565..1bad3f31 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -181,9 +181,6 @@ set (USE_OPENGL ON CACHE BOOL "Include OpenGL support")
 set (USE_QT ON CACHE BOOL "Include Qt support")
 set (FORCE_OPENGL_1 OFF CACHE BOOL "Force iv to use OpenGL's fixed pipeline")
 set (USE_PYTHON ON CACHE BOOL "Build the Python bindings")
-set (USE_PYTHON3 OFF CACHE BOOL "Build the Python3 bindings")
-set (PYTHON_VERSION 2.6)
-set (PYTHON3_VERSION 3.2)
 set (PYLIB_INCLUDE_SONAME OFF CACHE BOOL "If ON, soname/soversion will be set for Python module library")
 set (PYLIB_LIB_PREFIX OFF CACHE BOOL "If ON, prefix the Python module with 'lib'")
 set (USE_FIELD3D ON CACHE BOOL "Use Field3D if found")
@@ -353,6 +350,8 @@ if (LINKSTATIC)
     set (Boost_USE_STATIC_LIBS 1)
 endif ()
 
+include (GNUInstallDirs)
+
 set (CMAKE_MODULE_PATH
      "${PROJECT_SOURCE_DIR}/src/cmake/modules"
      "${PROJECT_SOURCE_DIR}/src/cmake")
@@ -370,59 +369,6 @@ include_directories (
   )
 
 
-###########################################################################
-# Paths for install tree customization.  Note that relative paths are relative
-# to CMAKE_INSTALL_PREFIX.
-set (DEFAULT_BIN_INSTALL_DIR   "bin")
-set (DEFAULT_LIB_INSTALL_DIR   "lib")
-set (DEFAULT_INCLUDE_INSTALL_DIR "include/OpenImageIO")
-if (UNIX AND NOT SELF_CONTAINED_INSTALL_TREE)
-    # Try to be well-behaved and install into reasonable places according to
-    # the "standard" unix directory heirarchy
-    # TODO: Figure out how to get the correct python directory
-    set (DEFAULT_PYLIB_INSTALL_DIR "lib/python/site-packages")
-    set (DEFAULT_PYLIB3_INSTALL_DIR "lib/python3/site-packages")
-    set (DEFAULT_DOC_INSTALL_DIR "share/doc/OpenImageIO")
-    set (DEFAULT_MAN_INSTALL_DIR "share/man/man1")
-    set (DEFAULT_FONTS_INSTALL_DIR "share/fonts/oiio")
-else ()
-    # Here is the "self-contained install tree" case: the expectation here is
-    # that everything OIIO related will go into its own directory, not into
-    # some standard system heirarchy.
-    set (DEFAULT_PYLIB_INSTALL_DIR "python")
-    set (DEFAULT_PYLIB3_INSTALL_DIR "python3")
-    set (DEFAULT_DOC_INSTALL_DIR "doc")
-    set (DEFAULT_MAN_INSTALL_DIR "doc/man")
-    set (DEFAULT_FONTS_INSTALL_DIR "fonts/oiio")
-endif ()
-if (EXEC_INSTALL_PREFIX)
-    # Tack on an extra prefix to support multi-arch builds.
-    set (DEFAULT_BIN_INSTALL_DIR   "${EXEC_INSTALL_PREFIX}/${DEFAULT_BIN_INSTALL_DIR}")
-    set (DEFAULT_LIB_INSTALL_DIR   "${EXEC_INSTALL_PREFIX}/${DEFAULT_LIB_INSTALL_DIR}")
-    set (DEFAULT_PYLIB_INSTALL_DIR "${EXEC_INSTALL_PREFIX}/${DEFAULT_PYLIB_INSTALL_DIR}")
-    set (DEFAULT_PYLIB3_INSTALL_DIR "${EXEC_INSTALL_PREFIX}/${DEFAULT_PYLIB3_INSTALL_DIR}")
-    set (DEFAULT_FONTS_INSTALL_DIR "${EXEC_INSTALL_PREFIX}/${DEFAULT_FONTS_INSTALL_DIR}")
-endif ()
-# Set up cmake cache variables corresponding to the defaults deduced above, so
-# that the user can override them as desired:
-set (BIN_INSTALL_DIR ${DEFAULT_BIN_INSTALL_DIR} CACHE STRING
-     "Install location for binaries (relative to CMAKE_INSTALL_PREFIX or absolute)")
-set (LIB_INSTALL_DIR ${DEFAULT_LIB_INSTALL_DIR} CACHE STRING
-     "Install location for libraries (relative to CMAKE_INSTALL_PREFIX or absolute)")
-set (PYLIB_INSTALL_DIR ${DEFAULT_PYLIB_INSTALL_DIR} CACHE STRING
-     "Install location for python libraries (relative to CMAKE_INSTALL_PREFIX or absolute)")
-set (PYLIB3_INSTALL_DIR ${DEFAULT_PYLIB3_INSTALL_DIR} CACHE STRING
-     "Install location for python3 libraries (relative to CMAKE_INSTALL_PREFIX or absolute)")
-set (INCLUDE_INSTALL_DIR ${DEFAULT_INCLUDE_INSTALL_DIR} CACHE STRING
-     "Install location of header files (relative to CMAKE_INSTALL_PREFIX or absolute)")
-set (DOC_INSTALL_DIR ${DEFAULT_DOC_INSTALL_DIR} CACHE STRING
-     "Install location for documentation (relative to CMAKE_INSTALL_PREFIX or absolute)")
-set (FONTS_INSTALL_DIR ${DEFAULT_FONTS_INSTALL_DIR} CACHE STRING
-     "Install location for fonts (relative to CMAKE_INSTALL_PREFIX or absolute)")
-if (UNIX)
-    set (MAN_INSTALL_DIR ${DEFAULT_MAN_INSTALL_DIR} CACHE STRING
-         "Install location for manual pages (relative to CMAKE_INSTALL_PREFIX or absolute)")
-endif()
 set (PLUGIN_SEARCH_PATH "" CACHE STRING "Default plugin search path")
 
 set (INSTALL_DOCS ON CACHE BOOL "Install documentation")
@@ -440,9 +386,9 @@ if (CMAKE_SKIP_RPATH)
     set (CMAKE_SKIP_RPATH FALSE)
     unset (CMAKE_INSTALL_RPATH)
 else ()
-    set (CMAKE_INSTALL_RPATH "${LIB_INSTALL_DIR}")
+    set (CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_FULL_LIBDIR}")
     if (NOT IS_ABSOLUTE ${CMAKE_INSTALL_RPATH})
-        set (CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}")
+        set (CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_FULL_LIBDIR}")
     endif ()
     set (CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 endif ()
@@ -521,17 +467,14 @@ if (NOT EMBEDPLUGINS AND NOT BUILD_OIIOUTIL_ONLY)
     endforeach ()
 endif ()
 
-if (USE_PYTHON AND boost_PYTHON_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
+if (PYTHONLIBS_FOUND AND boost_PYTHON_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
     add_subdirectory (src/python)
 endif ()
-if (USE_PYTHON3 AND boost_PYTHON_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
-    #build the python3 module in a different binary directory since it will
-    #have the same name as the python2 module (e.g. OpenImageIO.so)
-    add_subdirectory (src/python src/python3)
-endif ()
 
 add_subdirectory (src/include)
-add_subdirectory (src/doc)
+if (INSTALL_DOCS)
+    add_subdirectory (src/doc)
+endif ()
 add_subdirectory (src/fonts)
 add_subdirectory (src/nuke)
 
diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 03faf7bd..970aef6b 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -107,6 +107,25 @@ endif ()
 # OpenEXR setup
 ###########################################################################
 
+###########################################################################
+# Python Setup
+
+if (USE_PYTHON)
+    find_package (PythonLibs REQUIRED)
+    EXECUTE_PROCESS(COMMAND python -c "import sys;print('%s.%s'%sys.version_info[0:2])"
+                OUTPUT_VARIABLE PYTHON_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+    if (VERBOSE)
+        message (STATUS "Python found ${PYTHONLIBS_FOUND} ")
+        message (STATUS "Python include dirs ${PYTHON_INCLUDE_PATH}")
+        message (STATUS "Python libraries    ${PYTHON_LIBRARIES}")
+        message (STATUS "Python to include 'lib' prefix: ${PYLIB_LIB_PREFIX}")
+        message (STATUS "Python to include SO version: ${PYLIB_INCLUDE_SONAME}")
+    endif ()
+endif ()
+
+# Python Setup
+###########################################################################
 
 ###########################################################################
 # Boost setup
@@ -115,12 +134,6 @@ if (NOT Boost_FIND_QUIETLY)
     message (STATUS "BOOST_ROOT ${BOOST_ROOT}")
 endif ()
 
-if (NOT DEFINED Boost_ADDITIONAL_VERSIONS)
-  set (Boost_ADDITIONAL_VERSIONS "1.60" "1.59" "1.58" "1.57" "1.56"
-                                 "1.55" "1.54" "1.53" "1.52" "1.51" "1.50"
-                                 "1.49" "1.48" "1.47" "1.46" "1.45" "1.44"
-                                 "1.43" "1.43.0" "1.42" "1.42.0")
-endif ()
 if (LINKSTATIC)
     set (Boost_USE_STATIC_LIBS   ON)
 endif ()
@@ -131,15 +144,14 @@ if (BOOST_CUSTOM)
     # Boost_VERSION, Boost_INCLUDE_DIRS, Boost_LIBRARY_DIRS, Boost_LIBRARIES.
 else ()
     set (Boost_COMPONENTS filesystem regex system thread)
-    find_package (Boost 1.42 REQUIRED
-                  COMPONENTS ${Boost_COMPONENTS}
-                 )
+    find_package (Boost REQUIRED COMPONENTS ${Boost_COMPONENTS})
 
     # Try to figure out if this boost distro has Boost::python.  If we
     # include python in the component list above, cmake will abort if
     # it's not found.  So we resort to checking for the boost_python
     # library's existance to get a soft failure.
-    find_library (my_boost_python_lib boost_python
+    find_library (my_boost_python_lib
+                  NAMES boost_python boost_python-${PYTHON_VERSION}
                   PATHS ${Boost_LIBRARY_DIRS} NO_DEFAULT_PATH)
     mark_as_advanced (my_boost_python_lib)
     if (NOT my_boost_python_lib AND Boost_SYSTEM_LIBRARY_RELEASE)
diff --git a/src/cmake/oiio_macros.cmake b/src/cmake/oiio_macros.cmake
index ee7be325..bfd07413 100644
--- a/src/cmake/oiio_macros.cmake
+++ b/src/cmake/oiio_macros.cmake
@@ -7,9 +7,9 @@
 #
 macro (oiio_install_targets)
     install (TARGETS ${ARGN}
-             RUNTIME DESTINATION "${BIN_INSTALL_DIR}" COMPONENT user
-             LIBRARY DESTINATION "${LIB_INSTALL_DIR}" COMPONENT user
-             ARCHIVE DESTINATION "${LIB_INSTALL_DIR}" COMPONENT developer)
+             RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}" COMPONENT user
+             LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT user
+             ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT developer)
 endmacro ()
 
 # Macro to add a build target for an IO plugin.
diff --git a/src/doc/CMakeLists.txt b/src/doc/CMakeLists.txt
index eea04340..60c9be72 100644
--- a/src/doc/CMakeLists.txt
+++ b/src/doc/CMakeLists.txt
@@ -6,10 +6,10 @@ set (public_docs
      "${OpenImageIO_SOURCE_DIR}/CHANGES.md"
 )
 
-if (INSTALL_DOCS)
-    install (FILES ${public_docs} DESTINATION ${DOC_INSTALL_DIR}
-             COMPONENT documentation)
-endif ()
+install (FILES ${public_docs}
+         DESTINATION ${CMAKE_INSTALL_DOCDIR}
+         COMPONENT documentation
+)
 
 # generate man pages using txt2man and a tiny python script to munge the
 # result of "$tool --help"
@@ -37,8 +37,8 @@ if (UNIX AND TXT2MAN AND PYTHONINTERP_FOUND)
     # force man page build before install
     add_custom_target (man_pages ALL DEPENDS ${manpage_files})
 
-    if (INSTALL_DOCS)
-        install (FILES ${manpage_files}
-                 DESTINATION ${MAN_INSTALL_DIR} COMPONENT documentation)
-    endif ()
+    install (FILES ${manpage_files}
+             DESTINATION ${CMAKE_INSTALL_MANDIR}
+             COMPONENT documentation
+    )
 endif()
diff --git a/src/fonts/CMakeLists.txt b/src/fonts/CMakeLists.txt
index 1e296da0..da17ed9d 100644
--- a/src/fonts/CMakeLists.txt
+++ b/src/fonts/CMakeLists.txt
@@ -1,7 +1,9 @@
 file (GLOB public_fonts "*/*.ttf")
 
 if (INSTALL_FONTS AND USE_FREETYPE)
-    install (FILES ${public_fonts} DESTINATION ${FONTS_INSTALL_DIR}
-             COMPONENT fonts)
+    install (FILES ${public_fonts}
+             DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/fonts/oiio
+             COMPONENT fonts
+    )
 endif ()
 
diff --git a/src/include/CMakeLists.txt b/src/include/CMakeLists.txt
index b063e6f3..d5d92067 100644
--- a/src/include/CMakeLists.txt
+++ b/src/include/CMakeLists.txt
@@ -19,5 +19,7 @@ set (OIIO_BUILD_CPP14 ${USE_CPP14})
 configure_file(OpenImageIO/oiioversion.h.in "${CMAKE_BINARY_DIR}/include/OpenImageIO/oiioversion.h" @ONLY)
 list(APPEND public_headers "${CMAKE_BINARY_DIR}/include/OpenImageIO/oiioversion.h")
 
-install (FILES ${public_headers} DESTINATION ${INCLUDE_INSTALL_DIR}
-         COMPONENT developer)
+install (FILES ${public_headers}
+         DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/OpenImageIO
+         COMPONENT developer
+)
diff --git a/src/nuke/txReader/CMakeLists.txt b/src/nuke/txReader/CMakeLists.txt
index 3e72b6d4..0a803d10 100644
--- a/src/nuke/txReader/CMakeLists.txt
+++ b/src/nuke/txReader/CMakeLists.txt
@@ -29,4 +29,4 @@ else ()
 endif ()
 
 install (TARGETS txReader
-    LIBRARY DESTINATION "${LIB_INSTALL_DIR}/nuke")
+    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/nuke")
diff --git a/src/nuke/txWriter/CMakeLists.txt b/src/nuke/txWriter/CMakeLists.txt
index 66312bc4..fcdf2d64 100644
--- a/src/nuke/txWriter/CMakeLists.txt
+++ b/src/nuke/txWriter/CMakeLists.txt
@@ -29,4 +29,4 @@ else ()
 endif ()
 
 install (TARGETS txWriter
-    LIBRARY DESTINATION "${LIB_INSTALL_DIR}/nuke")
+    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/nuke")
diff --git a/src/python/CMakeLists.txt b/src/python/CMakeLists.txt
index 81a4a890..2152004a 100644
--- a/src/python/CMakeLists.txt
+++ b/src/python/CMakeLists.txt
@@ -1,143 +1,56 @@
-#if the CMAKE_CURRENT_BINARY_DIR is python3, then build the python3 module,
-#otherwise the python2 module
-string (REGEX MATCH "python3\$" _py3_subdir ${CMAKE_CURRENT_BINARY_DIR})
-
-if (_py3_subdir)
-    set (BUILD_PY3 ON)
-else ()
-    set (BUILD_PY3 OFF)
-endif ()
-
-if (NOT BOOST_CUSTOM AND NOT BUILD_PY3)
-    #Unset those, otherwise find_package(PythonLibs) will pick up old stuff
-    #if it has been run before
-    unset(Python_ADDITIONAL_VERSIONS)
-    unset(PYTHON_LIBRARY)
-    unset(PYTHON_LIBRARY CACHE)
-    unset(PYTHON_INCLUDE_DIR)
-    unset(PYTHON_INCLUDE_DIR CACHE)
-    unset(PYTHON_INCLUDE_PATH)
-    unset(PYTHON_INCLUDE_PATH CACHE)
-    find_package (PythonLibs ${PYTHON_VERSION} REQUIRED)
-    find_package (Boost 1.42 REQUIRED COMPONENTS python)
-elseif (BOOST_CUSTOM AND NOT BUILD_PY3)
-    find_package (PythonLibs ${PYTHON_VERSION} REQUIRED)
-else ()
-    #BOOST_CUSTOM is ignored for python3
-
-    #Unset those, otherwise find_package(PythonLibs) will pick up old stuff
-    #if it has been run before
-    unset(PYTHON_LIBRARY)
-    unset(PYTHON_LIBRARY CACHE)
-    unset(PYTHON_INCLUDE_DIR)
-    unset(PYTHON_INCLUDE_DIR CACHE)
-    unset(PYTHON_INCLUDE_PATH)
-    unset(PYTHON_INCLUDE_PATH CACHE)
-
-    #cmake 2.8 does not look for python 3.4
-    set(Python_ADDITIONAL_VERSIONS 3.4)
-    find_package (PythonInterp ${PYTHON3_VERSION} REQUIRED)
-    find_package (PythonLibs ${PYTHON3_VERSION} REQUIRED)
-
-    #Finding the python3 component for boost is a little tricky, since it has
-    #different names on different systems. Try the most common ones
-    #(boost_python3, boost_python-py34, …).
-    foreach (_boost_py3_lib python3 python-py34 python-py33 python-py32)
-        find_package (Boost 1.42 QUIET COMPONENTS ${_boost_py3_lib})
-        string (TOUPPER ${_boost_py3_lib} boost_py3_lib_name)
-        if (Boost_${boost_py3_lib_name}_FOUND)
-            #Not the most beautiful thing to do, but that gets them included in
-            #the target_link_libraries(…) call farther down
-            set (Boost_PYTHON_LIBRARIES ${Boost_${boost_py3_lib_name}_LIBRARIES})
-            break ()
-        endif ()
-    endforeach ()
-endif ()
-
-if (APPLE)
-#    set (PYTHON_LIBRARIES /opt/local/lib)
-endif ()
-
 # Disable some warnings for Clang, it's a little too picky with boost
 if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     add_definitions ("-Wno-array-bounds")
 endif ()
 
-if (BUILD_PY3)
-    set (target_name Py3OpenImageIO)
+set (target_name PyOpenImageIO)
+
+set (python_srcs py_imageinput.cpp py_imageoutput.cpp
+    py_imagecache.cpp py_imagespec.cpp py_roi.cpp
+    py_imagebuf.cpp py_imagebufalgo.cpp
+    py_typedesc.cpp py_paramvalue.cpp py_deepdata.cpp
+    py_oiio.cpp)
+
+include_directories (${PYTHON_INCLUDE_PATH} ${Boost_INCLUDE_DIRS})
+add_library (${target_name} MODULE ${python_srcs})
+if (APPLE)
+    target_link_libraries (${target_name} OpenImageIO ${Boost_LIBRARIES} ${Boost_PYTHON_LIBRARIES} ${CMAKE_DL_LIBS})
+    set_target_properties (${target_name} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
 else ()
-    set (target_name PyOpenImageIO)
+    target_link_libraries (${target_name} OpenImageIO ${Boost_LIBRARIES} ${Boost_PYTHON_LIBRARIES} ${PYTHON_LIBRARIES} ${CMAKE_DL_LIBS})
 endif ()
 
-if (BOOST_CUSTOM OR Boost_FOUND AND PYTHONLIBS_FOUND)
-
-    set (python_srcs py_imageinput.cpp py_imageoutput.cpp
-         py_imagecache.cpp py_imagespec.cpp py_roi.cpp
-         py_imagebuf.cpp py_imagebufalgo.cpp
-         py_typedesc.cpp py_paramvalue.cpp py_deepdata.cpp
-         py_oiio.cpp)
+# Exclude the 'lib' prefix from the name
+if(NOT PYLIB_LIB_PREFIX)
+    add_definitions("-DOIIO_PYMODULE_NAME=OpenImageIO")
+    set_target_properties (${target_name} PROPERTIES
+                           OUTPUT_NAME OpenImageIO
+                           PREFIX "")
+else()
+    add_definitions("-DOIIO_PYMODULE_NAME=PyOpenImageIO")
+    set_target_properties (${target_name} PROPERTIES
+                           OUTPUT_NAME PyOpenImageIO
+                           PREFIX lib)
+endif ()
 
+if(PYLIB_INCLUDE_SONAME)
     if (VERBOSE)
-        message (STATUS "Python found ${PYTHONLIBS_FOUND} ")
-        message (STATUS "Python include dirs ${PYTHON_INCLUDE_PATH}")
-        message (STATUS "Python libraries    ${PYTHON_LIBRARIES}")
-        message (STATUS "Python to include 'lib' prefix: ${PYLIB_LIB_PREFIX}")
-        message (STATUS "Python to include SO version: ${PYLIB_INCLUDE_SONAME}")
-    endif ()
-
-    include_directories (${PYTHON_INCLUDE_PATH} ${Boost_INCLUDE_DIRS})
-    add_library (${target_name} MODULE ${python_srcs})
-    if (APPLE)
-        target_link_libraries (${target_name} OpenImageIO ${Boost_LIBRARIES} ${Boost_PYTHON_LIBRARIES} ${CMAKE_DL_LIBS})
-        set_target_properties (${target_name} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
-    else ()
-        target_link_libraries (${target_name} OpenImageIO ${Boost_LIBRARIES} ${Boost_PYTHON_LIBRARIES} ${PYTHON_LIBRARIES} ${CMAKE_DL_LIBS})
-    endif ()
-
-    # Exclude the 'lib' prefix from the name
-    if(NOT PYLIB_LIB_PREFIX)
-        add_definitions("-DOIIO_PYMODULE_NAME=OpenImageIO")
-        set_target_properties (${target_name} PROPERTIES
-                                 OUTPUT_NAME OpenImageIO
-                                 PREFIX "")
-    else()
-        add_definitions("-DOIIO_PYMODULE_NAME=PyOpenImageIO")
-        set_target_properties (${target_name} PROPERTIES
-                                 OUTPUT_NAME PyOpenImageIO
-                                 PREFIX lib)
-    endif ()
-
-    if(PYLIB_INCLUDE_SONAME)
-        if (VERBOSE)
-            message(STATUS "Setting PyOIIO SOVERSION to: ${SOVERSION}")
-        endif ()
-        set_target_properties(${target_name} PROPERTIES
-            VERSION ${OIIO_VERSION_MAJOR}.${OIIO_VERSION_MINOR}
-            SOVERSION ${SOVERSION}
-        )
-    endif()
-
-    if (WIN32)
-        set_target_properties (${target_name} PROPERTIES
-                               DEBUG_POSTFIX "_d"
-                               SUFFIX ".pyd")
-    endif()
-    
-    if (BUILD_PY3)
-        install (TARGETS ${target_name}
-                 RUNTIME DESTINATION ${PYLIB3_INSTALL_DIR} COMPONENT user
-                 LIBRARY DESTINATION ${PYLIB3_INSTALL_DIR} COMPONENT user)
-    else ()
-        install (TARGETS ${target_name}
-                 RUNTIME DESTINATION ${PYLIB_INSTALL_DIR} COMPONENT user
-                 LIBRARY DESTINATION ${PYLIB_INSTALL_DIR} COMPONENT user)
+        message(STATUS "Setting PyOIIO SOVERSION to: ${SOVERSION}")
     endif ()
-elseif (BUILD_PY3)
-    if (NOT PYTHONLIBS_FOUND)
-        message (STATUS "Python3 libraries not found")
-    endif ()
-    if (NOT Boost_FOUND)
-        message (STATUS "Boost python3 component not found")
-    endif ()
-    set(USE_PYTHON3 OFF)
-endif ()
+    set_target_properties(${target_name} PROPERTIES
+        VERSION ${OIIO_VERSION_MAJOR}.${OIIO_VERSION_MINOR}
+        SOVERSION ${SOVERSION}
+    )
+endif()
+
+if (WIN32)
+    set_target_properties (${target_name} PROPERTIES
+                           DEBUG_POSTFIX "_d"
+                           SUFFIX ".pyd")
+endif()
+
+SET(PYTHON_DEST "${CMAKE_INSTALL_LIBDIR}/python${PYTHON_VERSION}/site-packages" )
+install (TARGETS ${target_name}
+         RUNTIME DESTINATION ${PYTHON_DEST} COMPONENT user
+         LIBRARY DESTINATION ${PYTHON_DEST} COMPONENT user
+)
-- 
2.14.1

