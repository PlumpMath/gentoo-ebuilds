diff -Naur a/src/include/OSL/llvm_util.h b/src/include/OSL/llvm_util.h
--- a/src/include/OSL/llvm_util.h	2016-06-10 10:24:07.275889592 +0930
+++ b/src/include/OSL/llvm_util.h	2016-06-10 10:23:15.254890346 +0930
@@ -91,10 +91,6 @@
     void debug (int d) { m_debug = d; }
     int debug () const { return m_debug; }
 
-    /// Use MCJIT?
-    void mcjit (int on) { m_mcjit = on; }
-    int mcjit () const { return m_mcjit; }
-
     /// Return a reference to the current context.
     llvm::LLVMContext &context () const { return *m_llvm_context; }
 
@@ -519,7 +515,6 @@
 
 
     int m_debug;
-    int m_mcjit;
     PerThreadInfo *m_thread;
     llvm::LLVMContext *m_llvm_context;
     llvm::Module *m_llvm_module;
diff -Naur a/src/include/OSL/oslexec.h b/src/include/OSL/oslexec.h
--- a/src/include/OSL/oslexec.h	2016-06-10 10:24:07.275889592 +0930
+++ b/src/include/OSL/oslexec.h	2016-06-10 10:23:15.254890346 +0930
@@ -155,7 +155,6 @@
     ///    int llvm_debug         Set LLVM extra debug level (0)
     ///    int llvm_debug_layers  Extra printfs upon entering and leaving
     ///                              layer functions.
-    ///    int llvm_mcjit         Use LLVM MCJIT if available (0).
     ///    int max_local_mem_KB   Error if shader group needs more than this
     ///                              much local storage to execute (1024K)
     ///    string debug_groupname Name of shader group -- debug only this one
diff -Naur a/src/liboslexec/backendllvm.cpp b/src/liboslexec/backendllvm.cpp
--- a/src/liboslexec/backendllvm.cpp	2016-06-10 10:24:07.275889592 +0930
+++ b/src/liboslexec/backendllvm.cpp	2016-06-10 10:23:15.255890346 +0930
@@ -97,9 +97,6 @@
     // getcwd inside LLVM. Oy.
     check_cwd (shadingsys);
 #endif
-    int mcjit = 0;
-    if (shadingsys.getattribute ("llvm_mcjit", TypeDesc::INT, &mcjit))
-        ll.mcjit (mcjit);
 }
 
 
diff -Naur a/src/liboslexec/llvm_util.cpp b/src/liboslexec/llvm_util.cpp
--- a/src/liboslexec/llvm_util.cpp	2016-06-10 10:24:07.276889592 +0930
+++ b/src/liboslexec/llvm_util.cpp	2016-06-10 10:23:15.255890346 +0930
@@ -37,18 +37,8 @@
 #error "LLVM >= 3.5 requires USE_CPP11=1 or USE_CPP14=1"
 #endif
 
-#ifndef USE_MCJIT
-  // MCJIT first appeared with LLVM 3.3
-# define USE_MCJIT (OSL_LLVM_VERSION>=33)
-#endif
-
-// MCJIT is mandatory for LLVM 3.6 and beyond, no more old JIT
-#define MCJIT_REQUIRED (USE_MCJIT >= 2 || OSL_LLVM_VERSION >= 36)
-
-#if MCJIT_REQUIRED
-# undef USE_MCJIT
-# define USE_MCJIT 2
-#endif
+#define USE_MCJIT 	(OSL_LLVM_VERSION >= 36)
+#define USE_OLD_JIT	(OSL_LLVM_VERSION <  36)
 
 #if OSL_LLVM_VERSION >= 33
 
@@ -312,7 +302,7 @@
 
 
 LLVM_Util::LLVM_Util (int debuglevel)
-    : m_debug(debuglevel), m_mcjit(MCJIT_REQUIRED), m_thread(NULL),
+    : m_debug(debuglevel), m_thread(NULL),
       m_llvm_context(NULL), m_llvm_module(NULL),
       m_builder(NULL), m_llvm_jitmm(NULL),
       m_current_function(NULL),
@@ -333,10 +323,10 @@
             ASSERT (m_thread->llvm_jitmm);
             jitmm_hold.push_back (shared_ptr<llvm::JITMemoryManager>(m_thread->llvm_jitmm));
         }
+    	m_llvm_jitmm = new OSL_Dummy_JITMemoryManager(m_thread->llvm_jitmm);
     }
 
     m_llvm_context = m_thread->llvm_context;
-    m_llvm_jitmm = new OSL_Dummy_JITMemoryManager(m_thread->llvm_jitmm);
 
     // Set up aliases for types we use over and over
     m_llvm_type_float = (llvm::Type *) llvm::Type::getFloatTy (*m_llvm_context);
@@ -454,38 +444,28 @@
     // Load the LLVM bitcode and parse it into a Module
     llvm::Module *m = NULL;
 
-#if USE_MCJIT /* Parse the whole thing now */
-    if (mcjit() || MCJIT_REQUIRED) {
+#if USE_MCJIT
         // FIXME!! Using MCJIT should not require unconditionally parsing
         // the bitcode. But for now, when using getLazyBitcodeModule to
         // lazily deserialize the bitcode, MCJIT is unable to find the
         // called functions due to disagreement about whether a leading "_"
         // is part of the symbol name.
-  #if OSL_LLVM_VERSION >= 35
-        llvm::ErrorOr<llvm::Module *> ModuleOrErr = llvm::parseBitcodeFile (buf, context());
-        if (std::error_code EC = ModuleOrErr.getError())
-            if (err)
-              *err = EC.message();
-        m = ModuleOrErr.get();
-  #else
-        m = llvm::ParseBitcodeFile (buf, context(), err);
-  #endif
-  #if OSL_LLVM_VERSION < 36
-        delete buf;
-  #endif
-    }
-    else
-#endif
-    {
-        // Create a lazily deserialized IR module
-        // This can only be done for old JIT
+    llvm::ErrorOr<llvm::Module *> ModuleOrErr = llvm::parseBitcodeFile (buf, context());
+    if (std::error_code EC = ModuleOrErr.getError())
+        if (err)
+          *err = EC.message();
+    m = ModuleOrErr.get();
+#endif
+#if USE_OLD_JIT
+    // Create a lazily deserialized IR module
+    // This can only be done for old JIT
 # if OSL_LLVM_VERSION >= 35
-        m = llvm::getLazyBitcodeModule (buf, context()).get();
+    m = llvm::getLazyBitcodeModule (buf, context()).get();
 # else
-        m = llvm::getLazyBitcodeModule (buf, context(), err);
+    m = llvm::getLazyBitcodeModule (buf, context(), err);
 # endif
-        // don't delete buf, the module has taken ownership of it
-    }
+    // don't delete buf, the module has taken ownership of it
+#endif /*USE_OLD_JIT*/
 
     // Debugging: print all functions in the module
     // for (llvm::Module::iterator i = m->begin(); i != m->end(); ++i)
@@ -522,6 +502,7 @@
     if (err)
         err->clear ();
 #if OSL_LLVM_VERSION >= 33
+#if USE_MCJIT
     m_llvm_exec = llvm::EngineBuilder(module())
                             .setEngineKind(llvm::EngineKind::JIT)
                             .setErrorStr(err)
@@ -529,6 +510,16 @@
                             .setOptLevel(llvm::CodeGenOpt::Default)
                             .setUseMCJIT(mcjit() || MCJIT_REQUIRED)
                             .create();
+#endif
+#if USE_OLD_JIT
+    m_llvm_exec = llvm::EngineBuilder(module())
+                            .setEngineKind(llvm::EngineKind::JIT)
+                            .setErrorStr(err)
+                            .setJITMemoryManager(jitmm())
+                            .setOptLevel(llvm::CodeGenOpt::Default)
+                            .setUseMCJIT(0)
+                            .create();
+#endif
 #else
     m_llvm_exec = llvm::ExecutionEngine::createJIT (module(), err,
                                     jitmm(), llvm::CodeGenOpt::Default,
diff -Naur a/src/liboslexec/oslexec_pvt.h b/src/liboslexec/oslexec_pvt.h
--- a/src/liboslexec/oslexec_pvt.h	2016-06-10 10:24:07.277889592 +0930
+++ b/src/liboslexec/oslexec_pvt.h	2016-06-10 10:23:15.256890346 +0930
@@ -716,7 +716,6 @@
     bool m_unknown_coordsys_error;        ///< Error to use unknown xform name?
     bool m_connection_error;              ///< Error for ConnectShaders to fail?
     bool m_greedyjit;                     ///< JIT as much as we can?
-    bool m_llvm_mcjit;                    ///< Use MCJIT if available?
     bool m_countlayerexecs;               ///< Count number of layer execs?
     int m_max_warnings_per_thread;        ///< How many warnings to display per thread before giving up?
     int m_profile;                        ///< Level of profiling of shader execution
diff -Naur a/src/liboslexec/shadingsys.cpp b/src/liboslexec/shadingsys.cpp
--- a/src/liboslexec/shadingsys.cpp	2016-06-10 10:24:07.277889592 +0930
+++ b/src/liboslexec/shadingsys.cpp	2016-06-10 10:23:15.256890346 +0930
@@ -636,7 +636,7 @@
       m_lockgeom_default (true), m_strict_messages(true),
       m_range_checking(true),
       m_unknown_coordsys_error(true), m_connection_error(true),
-      m_greedyjit(false), m_llvm_mcjit(false), m_countlayerexecs(false),
+      m_greedyjit(false), m_countlayerexecs(false),
       m_max_warnings_per_thread(100),
       m_profile(0),
       m_optimize(2),
@@ -1067,7 +1067,6 @@
     ATTR_SET ("unknown_coordsys_error", int, m_unknown_coordsys_error);
     ATTR_SET ("connection_error", int, m_connection_error);
     ATTR_SET ("greedyjit", int, m_greedyjit);
-    ATTR_SET ("llvm_mcjit", int, m_llvm_mcjit);
     ATTR_SET ("countlayerexecs", int, m_countlayerexecs);
     ATTR_SET ("max_warnings_per_thread", int, m_max_warnings_per_thread);
     ATTR_SET ("max_local_mem_KB", int, m_max_local_mem_KB);
@@ -1172,7 +1171,6 @@
     ATTR_DECODE ("unknown_coordsys_error", int, m_unknown_coordsys_error);
     ATTR_DECODE ("connection_error", int, m_connection_error);
     ATTR_DECODE ("greedyjit", int, m_greedyjit);
-    ATTR_DECODE ("llvm_mcjit", int, m_llvm_mcjit);
     ATTR_DECODE ("countlayerexecs", int, m_countlayerexecs);
     ATTR_DECODE ("max_warnings_per_thread", int, m_max_warnings_per_thread);
     ATTR_DECODE_STRING ("commonspace", m_commonspace_synonym);
@@ -1567,7 +1565,6 @@
     BOOLOPT (lockgeom_default);
     BOOLOPT (range_checking);
     BOOLOPT (greedyjit);
-    BOOLOPT (llvm_mcjit);
     BOOLOPT (countlayerexecs);
     BOOLOPT (opt_simplify_param);
     BOOLOPT (opt_constant_fold);
